/* TODO

======================================================================== MPU ========================================================================
    - Check and fix if MPU connection fails. Reset or something. Bunch of registers that can probably do something (see 107 for reset)
                - Code to check if device has been stopped for certain length of time, then go to sleep (probably in main.cpp actually)
                - Code here to program the MPU to go to sleep (actually CYCLE mode) while waking up every so often to take single accel reading (reg. 107 + 108)
                -- (Preset wake up intervals in register 108. Probaly use 5hz here)
                -- To keep MpuHandler class API-like, we can expose a public function that will go to sleep/cycle, which will in turn do things here in Update()
                    -- In my case, this would be called by BedHandler class
                -- With code in main.cpp to process these reading to tell if we are moving again
    - ^^^^^ Not really, lets just tell it when to sleep when were not using it and wake it back up when we are???? duh

    - Need to somehow allow for reboots without the DMP firmware write failing - Well not really, can just unplug

    - Instead of calibrating MPU every boot, maybe edit init to try to pull calibration data from another beebotte resource first. (Or we could just make sure to boot while bed is flat...a)
    -- To recalibrate we can run the calibrate function again to save new data to beebotte resource

    - Figure out exactly what the MPU offsets actually are.


======================================================================== ALARM ========================================================================
    - To impement an alarm, I am going to use Beebotte's persistent feature. In addition to Pub/Sub model, they have a read/write model. Write stores
        persistent data in their server (stays for like 3 months or something), write retrieves that data.
    - This is wanted functionality for an alarm because it allows us to have a point of 'permanent' storage without needing something like
        an external EEPROM, dedicated external server, or something like that.
    - In addition to just being able to store the alarm time data in Beebotte, we can also automatically publish that data to the channel with their 
        new "SoS" feature (Send on Subscribe). This is useful for if there is a power outage after the alarm is set. When the ESP boots back up,
        it will subscribe and be automatically sent that data from the alarmTime resource

    - Still need to figure out how to process the data to do the alarm, what options to have, how to actually set it, etc.
        - We can probably contact an external time server or something like that, then compare our time with that
        - Convert to 24 hour time

    - Logic to determine AM/PM if not specified

    - Subscribe to new resource
    - When alarm is received, we should publish(write) to another resource for us to check with a command if alarm set was successful

    - Crashes when say "set bed alarm for 2" (no minute or am/pm)

    - Add "set bed alarm for noon" or "midnight"

    - Add timestamp check when we get an alarm message to see if a day has passed (in case device is unplugged or something)

    - Add snooze feature? xD --> bed would go all the way back down

    - Add some sort of commands queue for alarm behavior so we don't use a blocking while (I think it blocks?)

    - Add a Google Assistant routine command (or tasker or whatever) for setting bed alarm mode - maybe preset behavior and random behavior?



======================================================================== REMOTE ========================================================================
    - Implement double tap to go all the way up or all the way down
    - Maybe make one button snooze alarm and one button turn off? 


======================================================================== GENERAL ========================================================================
    - Show on lights if MQTT is not connected
    - Voice command "Do I have bed alarm set?"
    - Be able to text to "wake me up"/ move bed
    - If a new command comes in, make sure you stop current command and default to latest one
    - Maybe look into a self-contained broker since beebotte already went out once - https://github.com/martin-ger/uMQTTBroker


======================================================================== DONE! ========================================================================
    - CHECK! Maybe we should do more checks for validity of json message. ESP would crash when accidentally sent message with payload {"data" : {"data" : ... }}
    - Cap the time amount to something a bit over the time it takes to fully raise or lower

*/



/*
THIS COMMIT:
- Working on adding MPU behavior
- Added clear alarmQueue
- Cleaned up HandleInputs
- Fixed queue not clearing bug
- Added ability to turn off alarm with remote
-- (And doesn't move the bed on that press)
*/